#include <WiFi.h>
#include <WebSocketsClient.h>
#include <Pixy2.h>

Pixy2 pixy;
WebSocketsClient webSocket;

// WiFi credentials (update with your network details)
const char* ssid = "YourNetworkName";
const char* password = "YourNetworkPassword";
const char* websocketServer = "192.168.1.100";  // Replace with your server's IP
const uint16_t websocketPort = 8084;  // WebSocket port for finish line ESP32

unsigned long lastBlueDetection = 0;
unsigned long lastRedDetection = 0;
const unsigned long detectionDelay = 3000;  // 3 seconds delay per color

void setup() {
    Serial.begin(115200);
    pixy.init();
    Serial.println("Pixy2 initialized successfully!");

    // Connect to WiFi
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");

    // Connect to WebSocket server
    webSocket.begin(websocketServer, websocketPort, "/");
    webSocket.onEvent(webSocketEvent);
    Serial.println("Connected to WebSocket server");
}

void loop() {
    webSocket.loop();  // Ensure WebSocket remains connected

    pixy.ccc.getBlocks();
    unsigned long currentTime = millis();

    if (pixy.ccc.numBlocks) {
        for (int i = 0; i < pixy.ccc.numBlocks; i++) {
            int signature = pixy.ccc.blocks[i].m_signature;
            if (signature == 1 && (currentTime - lastBlueDetection > detectionDelay)) {
                sendColorToServer("blue");
                lastBlueDetection = currentTime;
            } 
            else if (signature == 2 && (currentTime - lastRedDetection > detectionDelay)) {
                sendColorToServer("red");
                lastRedDetection = currentTime;
            }
        }
    }
}

// Function to send detected color over WebSocket
void sendColorToServer(const char* color) {
    if (webSocket.isConnected()) {
        Serial.print("Sending color to server: ");
        Serial.println(color);
        webSocket.sendTXT(color);
    } else {
        Serial.println("WebSocket not connected. Attempting to reconnect...");
        webSocket.begin(websocketServer, websocketPort, "/");
    }
}

// WebSocket event handler
void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
    if (type == WStype_CONNECTED) {
        Serial.println("WebSocket connected!");
    } else if (type == WStype_DISCONNECTED) {
        Serial.println("WebSocket disconnected. Reconnecting...");
        webSocket.begin(websocketServer, websocketPort, "/");
    }
}