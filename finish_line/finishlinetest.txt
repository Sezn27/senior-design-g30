#include <Wire.h>
#include <Adafruit_GFX.h>
#include "Adafruit_LEDBackpack.h"
#include <Pixy2.h>  
#include <WiFi.h>
#include <WebSocketsClient.h>

Pixy2 pixy;
Adafruit_BicolorMatrix matrix = Adafruit_BicolorMatrix();
WebSocketsClient webSocket;  // WebSocket client for server communication

bool raceWon = false;
int blueLapCount = 0;
int redLapCount = 0;
const int lapThreshold = 4;

// WiFi credentials (replace with your actual network details)
const char* ssid = "TheCrib1";
const char* password = "DeezNuts";
const char* websocketServer = "192.168.2.26";  // Replace with your server's IP
const uint16_t websocketPort = 8084;  // WebSocket port for finish line ESP32

void setup() {
  Serial.begin(115200);
  Serial.println("Starting Pixy2 and LED Matrix...");

  pixy.init();
  Serial.println("Pixy2 initialized successfully!");

  matrix.begin(0x70);
  Serial.println("LED Matrix initialized.");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");

  // Connect to WebSocket server
  webSocket.begin(websocketServer, websocketPort, "/");
  webSocket.onEvent(webSocketEvent);
  Serial.println("Connected to WebSocket server");

  // Countdown sequence
  delay(2000);
  Serial.println("Ready");
  displayColor(LED_RED);
  delay(2000);
  Serial.println("Set");
  displayColor(LED_YELLOW);
  delay(2000);
  Serial.println("Go!");
  displayColor(LED_GREEN);
  delay(2000);
  matrix.clear();
}

// Function to send detected color over WebSocket
void sendColorToServer(const char* color) {
  if (WiFi.status() == WL_CONNECTED && webSocket.isConnected()) {
    Serial.print("Sending color to server: ");
    Serial.println(color);
    webSocket.sendTXT(color);
  } else {
    Serial.println("WebSocket not connected. Unable to send color.");
  }
}

void displayColor(uint16_t color) {
  matrix.clear();
  for (uint8_t x = 0; x < 8; x++) {
    for (uint8_t y = 0; y < 8; y++) {
      matrix.drawPixel(x, y, color);
    }
  }
  matrix.writeDisplay();
}

void loop() {
  if (raceWon) return;

  webSocket.loop();  // Ensure WebSocket remains connected

  checkForWinner();

  if (!raceWon) scrollText("R.A.C.E", LED_GREEN);
  if (!raceWon) scrollText("PROJECT", LED_RED);
}

void checkForWinner() {
  pixy.ccc.getBlocks();
  if (pixy.ccc.numBlocks) {
    Serial.print("Detected ");
    Serial.print(pixy.ccc.numBlocks);
    Serial.println(" blocks:");

    for (int i = 0; i < pixy.ccc.numBlocks; i++) {
      Serial.print("  Block ");
      Serial.print(i);
      Serial.print(": ");
      pixy.ccc.blocks[i].print();

      if (pixy.ccc.blocks[i].m_signature == 1) {
        blueLapCount++;
        Serial.print("Blue Lap Count: ");
        Serial.println(blueLapCount);
        sendColorToServer("blue");  // Send blue detection to server
        if (blueLapCount == lapThreshold) {
          declareWinner("Blue Wins!", LED_YELLOW);
        }
      } 
      else if (pixy.ccc.blocks[i].m_signature == 2) {
        redLapCount++;
        Serial.print("Red Lap Count: ");
        Serial.println(redLapCount);
        sendColorToServer("red");  // Send red detection to server
        if (redLapCount == lapThreshold) {
          declareWinner("Red Wins!", LED_YELLOW);
        }
      }
    }
  }
}

void declareWinner(const char* winnerText, uint16_t color) {
  Serial.println(winnerText);
  raceWon = true;

  while (true) {
    scrollText(winnerText, color);
  }
}

void scrollText(const char* text, uint16_t color) {
  matrix.clear();
  matrix.setTextWrap(false);
  matrix.setTextSize(1);
  matrix.setTextColor(color);

  int textWidth = strlen(text) * 6;

  for (int8_t x = 8; x >= -textWidth; x--) {
    matrix.clear();
    matrix.setCursor(x, 0);
    matrix.print(text);
    matrix.writeDisplay();
    delay(100);
  }
}

// WebSocket event handler (not used yet but required)
void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
  if (type == WStype_CONNECTED) {
    Serial.println("WebSocket connected!");
  } else if (type == WStype_DISCONNECTED) {
    Serial.println("WebSocket disconnected.");
  }
}
